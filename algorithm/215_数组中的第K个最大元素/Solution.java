import java.util.*;

public class Solution {
    
    public int findKthLargest_jdk(int[] nums, int k) {
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        for (int num : nums) {
            heap.add(num);
            if (heap.size() > k) {
                heap.poll();
            }
        }
        return heap.peek();
    }

    class MinHeap {
        int heapSize = 0;
        int index = -1;
        int[] array;

        public void printHeap() {
            for(int tmp : array) {
                System.out.printf("%d,", tmp);
            }
            System.out.println("");
        }

        public MinHeap(int heapSize) {
            this.heapSize = heapSize;
            this.array = new int[this.heapSize];
            for(int i=0;i<this.heapSize;i++) {
                this.array[i] = Integer.MAX_VALUE;
            }
        }

        public void swap(int i, int j) {
            int tmp = this.array[i];
            this.array[i] = this.array[j];
            this.array[j] = tmp;
        }

        public void siftUp(int i) {
            int maxIndex = i;
            int parent = (i - 1) / 2;

            if(parent >= 0 && array[parent] > array[i]) {
                maxIndex = parent;
            }

            if(maxIndex != i) {
                swap(maxIndex, i);
                siftUp(maxIndex);
            }
        }

        public void siftDown(int i) {
            int minIndex = i;
            int left = (i +1) * 2 - 1;
            int right = (i+1) * 2;

            if(left < heapSize && array[left] <  array[minIndex]) {
                minIndex = left;
            }

            if(right < heapSize && array[right] <  array[minIndex]) {
                minIndex = right;
            }

            if(minIndex != i) {
                swap(minIndex, i);
                siftDown(minIndex);
            }
        }

        public void buildHeap(int value) {
            this.index++;
            if(this.index > this.heapSize - 1) {
                if(this.array[0] > value) {
                    return;
                }
                this.array[0] = value;
                siftDown(0);
                this.index = this.heapSize -1;
            } else {
                this.array[this.index] = value;
                siftUp(this.index);
            }
            
        }

        public int getMinValue() {
            return this.array[0];
        }
    }

    public int findKthLargest(int[] nums, int k) {
        MinHeap minHeap = new MinHeap(k);

        for(int num : nums) {
            minHeap.buildHeap(num);
            //minHeap.printHeap();
        }

        return minHeap.getMinValue();
    }

    public static void main(String[] args) {
        Solution tester = new Solution();

        int rlt = tester.findKthLargest(new int[]{3,2,1,5,6,4}, 2);
        System.out.println(rlt);


             rlt = tester.findKthLargest(new int[]{3,2,3,1,2,4,5,5,6}, 4);
       System.out.println(rlt);


       rlt = tester.findKthLargest(new int[]{8166,1064,8508,6255,1605,-2106,-3534,4018,9220,5121,613,-5503,543,4440,9140,-6495,9029,-3536,-2242,1393,7793,4225,-1181,-1161,-372,5665,3407,-8827,-1299,241,793,-5001,4923,4020,6537,-7711,260,1301,-7252,-3866,-3865,9201,8442,4662,2432,-7055,-750,-5089,-129,-9148,-1476,7098,3646,-8668,-1741,-6016,-4131,-2320,-4543,1018,-7365,7914,4915,7594,-4997,-330,3948,-6611,8601,-7092,-9964,4283,-5156,9124,-744,4596,-7322,6075,3443,1672,-2428,790,-6368,-3068,-6946,-4902,1951,7109,-6488,843,8872,75,2448,8804,3924,5859,6686,-6585,-1749,-9378,4803,-258,-19,5012,-8904,-8905,2298,-5292,7873,-755,8218,-9564,-5025,7323,-4934,7880,-3547,1477,-6833,-7526,-7233,1175,-2314,-2840,-4516,1842,-8536,4574,-5905,-1872,-7474,-9153,4497,6380,-6716,-7831,-6277,256,2515,6042,8056,-9053,1301,913,-8816,-3162,9288,3367,-59,-1370,1985,1243,-5848,-3403,-5471,8135,4518,-5000,-5808,2333,5385,1637,1252,6699,-5738,241,-7315,6237,4459,-7562,9918,2326,-3652,555,-2018,8096,6243,-2376,1849,-9843,9017,-7834,-7520,-7250,4210,2436,-768,1327,1070,-3890,-1226,6679,1300,1112,-9816,-4133,-8229,8472,-6328,-7276,9875,-9531,9866,-4845,-765,8891,2258,2326,-7246,1116,-4068,9688,800,-6422,-6854,7135,3517,-1806,5490,1340,-4241,5758,-6475,-3809,-3643,-6694,-7610,-6877,-3970,-9229,7639,3952,9931,-4162,788,2948,1885,853,2284,3741,4577,-5905,4349,5919,8437,-1475,9651,6234,-81,-1095,-700,8102,2808,-5954,4098,2825,-3630,7949,4121,9406,-5426,-9863,7103,7803,6022,-115,9083,2631,1739,-3217,6258,7277,-5664,-1489,4551,-6394,8594,-5372,5841,542,-6076,-5081,2851,-2947,-736,9841,7585,-2342,-1909,-5735,-3343,7750,-3670,2272,7968,-3045,-8229,-7269,-8542,2101,-2601,9575,2148,3646,4703,-3749,-8888,8694,-9693,19,-7623,-4350,-7128,-1813,-613,-5244,-5875,5942,3876,8159,-5977,-1280,6357,-7530,887,845,1232,-2043,-4218,561,-8373,-6426,-4322,-4061,-3003,-8776,4214,1693,-4387,4453,-9179,5983,-7971,240,7355,-9743,8354,9679,-9763,3327,-1294,-7309,9921,-7072,-973,-8763,9495,-695,-9228,-6230,7884,-9856,5666,-3354,-6681,4040,7426,-2796,2781,8816,9290,-8561,-3620,-6307,7215,-5443,8116,-7230,3313,-9550,308,9080,-1475,-3830,-2672,3796,-3654,-3166,6412,-9577,-2519,-8868,249,8082,51,1368,-3247,4401,-5114,-2049,482,457,-6435,2347,-1300,1864,-7453,1727,-1363,-2773,-1091,-5959,-703,-1789,241,-4508,-9657,9060,-3307,-7015,8418,-6134,-1623,8144,-6655,5579,370,5979,4608,4487,-6133,-651,4715,6952,-6809,-3674,-1606,-6883,4816,-4825,7192,-7405,-5805,-9200,294,3265,1333,6345,-3235,-4010,9129,558,331,-3432,-3555,3961,-1981,1796,-3070,-8093,-5280,-5563,-2742,-753,-1521,-2536,-9763,-6425,2797,-2733,8,8550,5062,-8488,-4118,4816,-4762,-9291,-7635,-4277,2214,8467,1395,7421,1248,-5222,-8928,-5450,-5884,4995,-7217,-6036,2782,8214,-5789,4417,-5254,-1379,-5086,6580,8739,7248,-8565,5310,-2175,9253,-3098,2579,8427,-154,-7202,4664,-7500,1565,-9142,6167,-2641,5721,1309,-5400,3841,-6030,2098,8033,-9857,8288,1717,-3841,8677,-4140,-3960,742,-380,-5509,-1715,1590,-5848,-1394,6328,8282,-5121,-3489,-8501,-2879,-6782,-5498,-6867,-9597,-7980,-7272,7579,8340,1762,1328,1533,2665,8785,5056,9483,-1788,8429,-7175,-9137,7462,-5102,-6821,4490,7645,-6657,7581,3613,1187,5047,7254,-4122,-8637,-7853,-1428,-9749,1755,8410,-42,-2227,6895,7049,7221,3651,5292,3319,2427,7625,-3568,483,-9137,6798,-7270,6697,-4490,4252,6606,-5478,9799,5963,5518,3652,-5892,8674,4205,1524,-5166,-6105,-797,7747,-8865,7260,-5955,-1823,-1698,9345,-8849,713,-694,-8355,-7858,9812,-7978,9862,732,-769,8272,-7086,-9484,-4583,-5485,-9870,6963,7391,-2095,-4960,6966,-393,1207,9607,-3778,-618,-7395,3474,1217,3408,-9955,5404,8142,2844,6225,-5315,2811,4041,3980,6827,-8648,5099,9165,-6018,-7775,9184,3889,9911,-7412,4861,83,-8313,-9954,6172,2382,4848,-6771,6316,-6563,2182,7454,3906,-3083,8834,9077,-4240,3863,-5219,-3547,9705,4674,-502,3384,2670,-1178,1498,-7239,-1593,9900,5449,-8615,-6288,-6577,2014,-5211,-9519,-4369,7067,-5301,-9524,-4247,-2498,6452,5620,4059,993,-7552,-5140,-4917,2338,2044,-5490,3227,-4363,-7731,7198,-4133,3616,-8107,-3683,4178,9559,6747,3911,5312,-5044,6344,8022,-9200,3725,7175,7670,1845,-8979,-5715,-6051,-8014,-5292,-1051,-1700,-9327,6331,-8413,-4029,9086,6250,998,-4386,3987,-6460,8180,-7824,-7418,2887,5771,-5241,-1208,-6045,6220,-6313,2012,-9634,8884,-4377,7825,7118,-9521,1050,-1973,5884,-7594,-4015,4340,908,-1589,4248,7635,1859,9151,-3180,2568,-1687,-394,-6759,9407,3568,-2347,8188,-6563,861,-3962,-3399,3771,4835,3672,4162,-4373,-5501,433,4131,-4560,-2090,2206,-5535,-9099,2967,-4288,-6976,-4985,-7939,6840,-7294,8964,-9605,-1866,-8977,5667,6968,-985,8008,-9704,-4907,9908,2012,-1560,7842,-362,-7194,1131,3290,-3245,-4537,-7936,4530,-1115,-6907,-5818,5332,3638,6624,-4510,-8669,-7971,3118,-2404,5066,-5630,-7289,7933,-7215,8272,5017,-4390,7460,8510,-2352,-1786,4799,5727,1581,-605,-3324,318,-5530,-5764,-1231,-9988,-9832,-4895,-2455,5520,-3860,-7626,-1160,4462,2376,8718,-3816,-4123,1162,-1802,6451,2093,-2196,-394,-3894,-4067,5270,-5481,5179,8139,9178,1213,283,-7479,3645,-9771,3784,-2327,1283,3502,-2697,5628,5492,7612,3150,-2324,-2058,-703,-5316,-4143,9503,-2138,5008,6743,2422,1194,650,-5903,9092,2143,-3316,5866,-6299,4478,604,-4859,8359,-438,-6011,4153,8062,7996,-4021,-4573,7654,-8643,5676,32,-8195,-181,3010,-3372,9034,-3654,8403,6783,-3184,8337,-2366,7015,5301,1739,9822,6875,-2202,9342,8237,-443,7124,952,7204,1653,4249,-3987,6898,-5359,-5376,5175,9366,5141,5687,6730,2284,6152,-2512,-5261,4548,1442,2452,3618,-3008,-7476,-185,1272,-5897,-6864,2283,-2263,-6408,-3812,-4933,6096,-4263,-1053,-3454,8644,1057,-6751,6345,-6967,5009,5536,3165,-8958,-2144,-5395,-1639,4886,-5501,1073,1439,5315,-71,-6262,6328,1680,-8546,6741,-699,402,8911,-8825,-7170,-6354,-1088,-2221,9286,-2930,-7523,-4379,-5760,-2879,-6957,-7065,-3423,391,-7377,-6413,2898,4774,-5454,9973,-9586,-2958,-2270,-9844,8394,9563,-81,9096,-7734,-5658,806,-2755,7585,1571,-903,-8261,8153,1466,-4855,4668,4956,3713,-8592,8105,-7873,-4182,3233,7394,55,1010,6376,3228,1019,915,7486,3365,1368,6713,8417,-5191,3393,1172,-7272,5698,564,-4284,8492,-5040,-264,3432,6496,9348,6524,-3330,1702,-4551,6128,-859,-9916,591,2798,1881,-9873,7555,3053,4301,7826,5484,1928,-5235,-3874,-7843,9298,-9684,9121,4301,4329,-480,-636,-2498,-1953,-4667,-7438,-5404,-7183,-2541,9426,3183,8385,470,2200,7537,-4753,2765,-8618,-1763,9100,-5036,-924,-4451,-9914,9096,3839,-3370,-6409,-3138,-8306,-9668,2356,3303,9778,-5658,8796,3270,7657,9201,6459,-7134,-67,-6007,2843,-4339,746,688,-7257,8209,-3183,-6522,6204,-2931,-1849,779,-7112,-9344,7153,3493,-7792,-4275,-1911,-75,2856,6242,-8249,2817,2419,-7304,-3651,-2533,-3470,-4361,3477,-4538,7088,-1372,-4666,6587,3728,2770,3761,-4417,7529,7879,-4467,6114,9836,5096,6676,-4477,-219,1582,6433,7898,5747,-8259,3928,-5690,-7339,-9616,8217,-6781,-5732,-838,9515,-8811,-7123,-2929,-5072,-1997,8853,-4807,9441,-36,2020,-2236,-9471,9062,-2108,1743,-7253,676,-3785,7470,316,-3357,9738,-4485,-2326,8450,2428,8944,-5840,-5256,-6836,-6626,-2691,-7954,-5994,1592,-7736,-5970,-848,-9296,-1446,3051,-5501,7373,7922,-5428,2342,7594,5665,3850,3068,9895,-215,8535,6439,-7207,2402,1782,-5909,-7064,-8306,7627,-9063,-8600,4077,-4736,8728,5480,1436,-2114,6436,9112,-255,3635,3563,9646,5673,6073,2714,-2473,-5990,-4136,-8991,-7118,8453,9144,-4947,-2203,3225,-9801,20,-2783,-9711,-8974,-7100,-5975,9107,8936,-3323,6626,6880,3443,-8913,-4505,-2148,3770,-557,5074,-5191,-4143,-2827,-520,-2250,-6549,8060,8393,-4200,4308,4100,4463,-6339,-8312,7920,-9849,-1732,933,-859,6669,5830,-3579,3163,8694,-1646,8834,-7349,-7292,-6929,-553,631,-1259,-7289,7347,5322,-7807,-6585,3953,7910,-3350,4674,-2561,73,8064,-543,7292,913,-530,9021,-3068,-9686,-9381,2954,-3328,-7801,-6707,-2661,-1583,1815,3448,3655,8683,1040,6931,1161,8425,4374,3632,1404,4601,482,-3445,883,-8667,-7690,947,7488,5998,3590,2438,-2783,8879,-3585,-6016,-2162,9985,-4778,-7629,-6555,-1055,-1356,201,-3776,9573,-1136,9306,9866,-3087,-2406,-8242,-5791,4566,-5720,-6853,-6063,4794,-8695,3137,-2370,-5837,9820,8180,5535,7744,-6501,6867,-1620,9194,4184,6436,-7982,-2208,4386,1611,9621,8808,-6881,-296,-2834,-7420,7430,405,-3501,3537,-3771,5384,-3001,1517,-6354,-8623,-6812,-825,1276,6174,-1942,7705,7650,-7832,7264,-874,9595,-892,1523,-6297,-2094,8633,-2101,807,-2742,-5951,-1254,-402,-9886,2289,-4596,-1438,-1092,9418,-9242,-5444,3466,-2099,-6106,-495,3710,504,-748,-7896,-6674,-1622,3449,1805,-5234,-344,9194,9766,1807,-9087,-6615,5373,2103,-9104,3645,8959,1214,-929,-7218,-8740,225,9872,-9166,7430,5830,-3611,5962,-7775,4074,8559,9353,1521,6711,-1509,-6548,-9259,-2404,-4524,-8524,2942,6429,-5184,54,1831,1703,-2776,-9460,7461,6785,8834,8967,6560,2180,8871,-4243,-1803,7757,4642,-3394,3013,6595,4750,8381,-8109,1351,-6796,-3809,-7376,-5186,8017,8286,-1899,-7555,-9409,-8725,-371,-2679,-2670,-6024,6877,8527,-9431,-1026,2145,-257,4209,-8148,9447,6693,-2432,6496,3726,-4539,1078,1570,9456,-8668,7569,-8796,3976,-8195,962,-9648,9903,-5843,5193,-2642,-6754,7137,7397,1012,6064,-5107,-73,2787,3760,2875,-423,9645,6444,8468,-6011,-6817,-6930,1243,-5999,5787,7728,7027,5802,7429,8143,-9493,4500,-4319,-5217,-4416,-1841,-2612,-6789,4010,-667,6973,-265,622,-7076,-1027,802,-5338,-4213,-4819,3214,386,-7152,-7622,-5834,-2850,3064,797,-5044,-2535,-691,1675,47,-3007,-735,-1470,136,1436,-8334,-6568,7609,-6987,-9139,-1201,-9129,-3950,9907,6975,-4850,4278,-5906,7927,4307,7972,-5640,-8836,7416,163,-3083,9279,270,-9924,1885,6023,3826,-1399,-989,4493,-2601,-8166,2551,6950,-3250,-9300,5223,5997,9799}, 90);

       System.out.println(rlt);
    }
}
